cmake_minimum_required(VERSION 3.15)

# ================================
# Global settings
# ================================
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# ================================
# Project
# ================================
project(HTTP-1.1 
    VERSION 1.0.0
    DESCRIPTION "Minimal HTTP/1.1 Server"
    LANGUAGES CXX
)

if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_BUILD_TYPE Release CACHE STRING
        "Choose build type: Debug, Release, RelWithDebInfo, MinSizeRel" FORCE)
endif()

# ================================
# Compiler checks
# ================================
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 8.0)
        message(FATAL_ERROR "GCC >= 8.0 required")
    endif()
elseif(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 6.0)
        message(FATAL_ERROR "Clang >= 6.0 required")
    endif()
elseif(MSVC)
    if(CMAKE_CXX_COMPILER_VERSION VERSION_LESS 19.20)
        message(FATAL_ERROR "MSVC >= 19.20 required (Visual Studio 2019+)")
    endif()
endif()

message(STATUS "Building ${PROJECT_NAME} v${PROJECT_VERSION} on ${CMAKE_SYSTEM_NAME}/${CMAKE_SYSTEM_PROCESSOR}")

# ================================
# Sources & Executable
# ================================
set(SOURCES
    src/main.cpp
    src/parser.cpp
    src/server.cpp
)

add_executable(HttpServer ${SOURCES})
target_include_directories(HttpServer PRIVATE ${CMAKE_SOURCE_DIR}/include)

# ================================
# Threads
# ================================
find_package(Threads REQUIRED)
target_link_libraries(HttpServer PRIVATE Threads::Threads)

# ================================
# Warnings & Security flags
# ================================
if(CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
    target_compile_options(HttpServer PRIVATE 
        -Wall -Wextra -Wpedantic
        -Werror
        -Wconversion -Wsign-conversion
        -Wshadow
        -Wnull-dereference
        -fstack-protector-strong
        -fPIE -fPIC
        $<$<CONFIG:Release>:-O2>
    )
elseif(MSVC)
    target_compile_options(HttpServer PRIVATE 
        /W4 /WX
        /permissive-
        /guard:cf
        /GS
    )
endif()

# ================================
# Static analysis (optional)
# ================================
find_program(CLANG_TIDY_EXE NAMES clang-tidy)
if(CLANG_TIDY_EXE)
    set_target_properties(HttpServer PROPERTIES CXX_CLANG_TIDY "${CLANG_TIDY_EXE}")
endif()

find_program(CPPCHECK_EXE NAMES cppcheck)
if(CPPCHECK_EXE)
    set(CMAKE_CXX_CPPCHECK "${CPPCHECK_EXE};--enable=all;--inconclusive;--quiet")
endif()

# ================================
# Tests
# ================================
option(BUILD_TESTS "Build unit tests" OFF)
if(BUILD_TESTS)
    enable_testing()
    add_subdirectory(tests)
endif()

# ================================
# Install
# ================================
install(TARGETS HttpServer RUNTIME DESTINATION bin)

# ================================
# Packaging
# ================================
include(CPack)